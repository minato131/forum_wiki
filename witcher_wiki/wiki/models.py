from django.db import models
from django.contrib.auth.models import User
from django.urls import reverse
from django.utils.text import slugify
from django.utils import timezone
from django_ckeditor_5.fields import CKEditor5Field
from taggit.managers import TaggableManager


class Category(models.Model):
    name = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=100)
    slug = models.SlugField('URL', unique=True)
    description = models.TextField('–û–ø–∏—Å–∞–Ω–∏–µ', blank=True)
    parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True,
                               verbose_name='–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', related_name='children')
    image = models.ImageField('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', upload_to='categories/', blank=True, null=True)

    # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    is_featured = models.BooleanField('–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', default=False,
                                      help_text='–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ')
    display_order = models.IntegerField('–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', default=0,
                                        help_text='–ß–µ–º –º–µ–Ω—å—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ –≤ —Å–ø–∏—Å–∫–µ')
    icon = models.CharField('–ò–∫–æ–Ω–∫–∞', max_length=50, blank=True,
                            help_text='–≠–º–æ–¥–∑–∏ –∏–ª–∏ –∫–æ–¥ –∏–∫–æ–Ω–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ‚öîÔ∏è, üë§, üê∫)')

    created_at = models.DateTimeField('–°–æ–∑–¥–∞–Ω–æ', auto_now_add=True)
    updated_at = models.DateTimeField('–û–±–Ω–æ–≤–ª–µ–Ω–æ', auto_now=True)

    class Meta:
        verbose_name = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
        verbose_name_plural = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'
        ordering = ['display_order', 'name']

    def __str__(self):
        return self.name

    def get_absolute_url(self):
        return reverse('wiki:category_detail', kwargs={'slug': self.slug})

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def get_article_count(self):
        return self.articles.count()

    def get_children_count(self):
        return self.children.count()


class Article(models.Model):
    STATUS_CHOICES = [
        ('draft', '–ß–µ—Ä–Ω–æ–≤–∏–∫'),
        ('review', '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'),
        ('published', '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'),
        ('rejected', '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'),
        ('archived', '–ê—Ä—Ö–∏–≤'),
    ]

    # –°–Ω–∞—á–∞–ª–∞ –≤—Å–µ –ø–æ–ª—è –º–æ–¥–µ–ª–∏
    title = models.CharField('–ó–∞–≥–æ–ª–æ–≤–æ–∫', max_length=200)
    slug = models.SlugField('URL', unique=True, max_length=200)
    content = CKEditor5Field('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', config_name='extends')
    excerpt = models.TextField('–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', max_length=500, blank=True)
    featured_image = models.ImageField('–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', upload_to='articles/', blank=True, null=True)

    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    meta_title = models.CharField('Meta Title', max_length=60, blank=True)
    meta_description = models.CharField('Meta Description', max_length=160, blank=True)
    meta_keywords = models.CharField('–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞', max_length=255, blank=True)

    # –°–≤—è–∑–∏
    author = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='–ê–≤—Ç–æ—Ä', related_name='articles')
    categories = models.ManyToManyField(Category, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', blank=True, related_name='articles')
    tags = TaggableManager(verbose_name='–¢–µ–≥–∏', blank=True)

    # –°—Ç–∞—Ç—É—Å –∏ –¥–∞—Ç—ã
    status = models.CharField('–°—Ç–∞—Ç—É—Å', max_length=20, choices=STATUS_CHOICES, default='draft')
    created_at = models.DateTimeField('–°–æ–∑–¥–∞–Ω–æ', auto_now_add=True)
    updated_at = models.DateTimeField('–û–±–Ω–æ–≤–ª–µ–Ω–æ', auto_now=True)
    published_at = models.DateTimeField('–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ', null=True, blank=True)

    # –ú–æ–¥–µ—Ä–∞—Ü–∏—è
    moderation_notes = models.TextField('–ó–∞–º–µ—Ç–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞', blank=True)
    moderated_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True,
                                     related_name='moderated_articles', verbose_name='–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä')
    moderated_at = models.DateTimeField('–í—Ä–µ–º—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏', null=True, blank=True)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    views_count = models.PositiveIntegerField('–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', default=0)

    class Meta:
        verbose_name = '–°—Ç–∞—Ç—å—è'
        verbose_name_plural = '–°—Ç–∞—Ç—å–∏'
        ordering = ['-created_at']

    def __str__(self):
        return self.title

    def get_absolute_url(self):
        return reverse('wiki:article_detail', kwargs={'slug': self.slug})

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.title)
        if not self.meta_title:
            self.meta_title = self.title[:60]
        if not self.meta_description and self.excerpt:
            self.meta_description = self.excerpt[:160]
        if self.status == 'published' and not self.published_at:
            self.published_at = timezone.now()
        super().save(*args, **kwargs)

    def increment_views(self):
        self.views_count += 1
        self.save(update_fields=['views_count'])

    def can_edit(self, user):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é"""
        return (user == self.author or
                user.is_staff or
                user.groups.filter(name__in=['–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä']).exists())

    def can_moderate(self, user):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é"""
        return (user.is_staff or
                user.groups.filter(name__in=['–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä']).exists())

    # –ú–ï–¢–û–î–´ –î–õ–Ø –õ–ê–ô–ö–û–í –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –ü–û–°–õ–ï –í–°–ï–• –ü–û–õ–ï–ô
    def get_likes_count(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ —Å—Ç–∞—Ç—å–∏"""
        return self.likes.count()

    def is_liked_by_user(self, user):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ª–∞–π–∫–Ω—É–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ç—å—é"""
        if not user.is_authenticated:
            return False
        return self.likes.filter(user=user).exists()

    def toggle_like(self, user):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ —É–±–∏—Ä–∞–µ—Ç –ª–∞–π–∫"""
        if not user.is_authenticated:
            return False

        like, created = ArticleLike.objects.get_or_create(
            user=user,
            article=self
        )

        if not created:
            like.delete()
            return False  # –õ–∞–π–∫ —É–±—Ä–∞–Ω
        return True  # –õ–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω


class ArticleMedia(models.Model):
    """–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –¥–ª—è —Å—Ç–∞—Ç–µ–π"""
    MEDIA_TYPES = [
        ('image', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'),
        ('video', '–í–∏–¥–µ–æ'),
        ('audio', '–ê—É–¥–∏–æ'),
        ('document', '–î–æ–∫—É–º–µ–Ω—Ç'),
    ]

    article = models.ForeignKey(Article, on_delete=models.CASCADE, related_name='media_files', verbose_name='–°—Ç–∞—Ç—å—è')
    file = models.FileField('–§–∞–π–ª', upload_to='article_media/')
    file_type = models.CharField('–¢–∏–ø —Ñ–∞–π–ª–∞', max_length=20, choices=MEDIA_TYPES)
    title = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=200, blank=True)
    description = models.TextField('–û–ø–∏—Å–∞–Ω–∏–µ', blank=True)
    uploaded_by = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='–ó–∞–≥—Ä—É–∑–∏–ª')
    uploaded_at = models.DateTimeField('–ó–∞–≥—Ä—É–∂–µ–Ω–æ', auto_now_add=True)
    display_order = models.IntegerField('–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', default=0)

    class Meta:
        verbose_name = '–ú–µ–¥–∏–∞—Ñ–∞–π–ª —Å—Ç–∞—Ç—å–∏'
        verbose_name_plural = '–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã —Å—Ç–∞—Ç–µ–π'
        ordering = ['display_order', '-uploaded_at']

    def __str__(self):
        return self.title or f'–ú–µ–¥–∏–∞ {self.id}'

    def get_file_url(self):
        return self.file.url

    def is_image(self):
        return self.file_type == 'image'

    def is_video(self):
        return self.file_type == 'video'

    def get_file_extension(self):
        return self.file.name.split('.')[-1].lower()


class ArticleRevision(models.Model):
    article = models.ForeignKey(Article, on_delete=models.CASCADE, related_name='revisions', verbose_name='–°—Ç–∞—Ç—å—è')
    title = models.CharField('–ó–∞–≥–æ–ª–æ–≤–æ–∫', max_length=200)
    content = CKEditor5Field('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', config_name='default')
    author = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='–ê–≤—Ç–æ—Ä')
    comment = models.CharField('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é', max_length=255, blank=True)
    created_at = models.DateTimeField('–°–æ–∑–¥–∞–Ω–æ', auto_now_add=True)

    class Meta:
        verbose_name = '–í–µ—Ä—Å–∏—è —Å—Ç–∞—Ç—å–∏'
        verbose_name_plural = '–í–µ—Ä—Å–∏–∏ —Å—Ç–∞—Ç–µ–π'
        ordering = ['-created_at']

    def __str__(self):
        return f'{self.article.title} - {self.created_at.strftime("%d.%m.%Y %H:%M")}'


class Comment(models.Model):
    article = models.ForeignKey(Article, on_delete=models.CASCADE, related_name='comments', verbose_name='–°—Ç–∞—Ç—å—è')
    author = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='–ê–≤—Ç–æ—Ä')
    parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True,
                               verbose_name='–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', related_name='replies')
    content = models.TextField('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
    created_at = models.DateTimeField('–°–æ–∑–¥–∞–Ω–æ', auto_now_add=True)
    updated_at = models.DateTimeField('–û–±–Ω–æ–≤–ª–µ–Ω–æ', auto_now=True)
    is_approved = models.BooleanField('–û–¥–æ–±—Ä–µ–Ω', default=True)

    class Meta:
        verbose_name = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'
        verbose_name_plural = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'
        ordering = ['created_at']

    def __str__(self):
        return f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {self.author.username} –∫ {self.article.title}'


class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')
    avatar = models.ImageField('–ê–≤–∞—Ç–∞—Ä', upload_to='avatars/', blank=True, null=True)
    bio = models.TextField('–û —Å–µ–±–µ', blank=True)

    # –°–æ—Ü—Å–µ—Ç–∏ –≤–º–µ—Å—Ç–æ –≤–µ–±-—Å–∞–π—Ç–∞
    telegram = models.URLField('Telegram', blank=True, max_length=255)
    vk = models.URLField('VK', blank=True, max_length=255)
    youtube = models.URLField('YouTube', blank=True, max_length=255)
    discord = models.CharField('Discord', blank=True, max_length=100)

    class Meta:
        verbose_name = '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        verbose_name_plural = '–ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'

    def __str__(self):
        return f'–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user.username}'

    def has_social_links(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ü—Å–µ—Ç–∏"""
        return bool(self.telegram or self.vk or self.youtube or self.discord)

    def get_telegram_username(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç username –∏–∑ —Å—Å—ã–ª–∫–∏ Telegram"""
        if self.telegram:
            if 't.me/' in self.telegram:
                return self.telegram.split('t.me/')[-1]
            elif '@' in self.telegram:
                return self.telegram.replace('@', '')
        return None

    def get_vk_username(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç username –∏–∑ —Å—Å—ã–ª–∫–∏ VK"""
        if self.vk:
            if 'vk.com/' in self.vk:
                return self.vk.split('vk.com/')[-1]
        return None

    def save(self, *args, **kwargs):
        if self.avatar:
            self.resize_avatar()
        super().save(*args, **kwargs)

    def resize_avatar(self):
        """–ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∞–≤–∞—Ç–∞—Ä–∞ –¥–æ 300x300 –ø–∏–∫—Å–µ–ª–µ–π"""
        try:
            from PIL import Image
            from io import BytesIO
            from django.core.files.base import ContentFile
            import os

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.open(self.avatar)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if img.mode in ('RGBA', 'P'):
                img = img.convert('RGB')

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä
            width, height = img.size

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            max_size = 300
            if width > max_size or height > max_size:
                # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
                if width > height:
                    new_width = max_size
                    new_height = int(height * max_size / width)
                else:
                    new_height = max_size
                    new_width = int(width * max_size / height)

                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
                img = img.resize((new_width, new_height), Image.Resampling.LANCZOS)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–æ–ª–µ avatar
            thumb_io = BytesIO()
            img.save(thumb_io, format='JPEG', quality=85, optimize=True)

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            avatar_name = self.avatar.name
            if not avatar_name.startswith('avatars/'):
                file_ext = os.path.splitext(avatar_name)[1] or '.jpg'
                avatar_name = f"avatars/user_{self.user.id}/avatar{file_ext}"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.avatar.save(
                avatar_name,
                ContentFile(thumb_io.getvalue()),
                save=False
            )

        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
            pass

    def delete_old_avatar(self):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–π –∞–≤–∞—Ç–∞—Ä –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ"""
        try:
            import os
            from django.core.files.storage import default_storage

            if self.avatar:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                old_profile = UserProfile.objects.filter(user=self.user).first()
                if old_profile and old_profile.avatar and old_profile.avatar != self.avatar:
                    if default_storage.exists(old_profile.avatar.name):
                        default_storage.delete(old_profile.avatar.name)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞: {e}")


class MediaLibrary(models.Model):
    title = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=200)
    file = models.FileField('–§–∞–π–ª', upload_to='media_library/')
    file_type = models.CharField('–¢–∏–ø —Ñ–∞–π–ª–∞', max_length=50)
    uploaded_by = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='–ó–∞–≥—Ä—É–∑–∏–ª')
    uploaded_at = models.DateTimeField('–ó–∞–≥—Ä—É–∂–µ–Ω–æ', auto_now_add=True)

    class Meta:
        verbose_name = '–ú–µ–¥–∏–∞—Ñ–∞–π–ª'
        verbose_name_plural = '–ú–µ–¥–∏–∞—Ç–µ–∫–∞'
        ordering = ['-uploaded_at']

    def __str__(self):
        return self.title
class ArticleLike(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –ª–∞–π–∫–æ–≤ —Å—Ç–∞—Ç–µ–π"""
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    article = models.ForeignKey(Article, on_delete=models.CASCADE, verbose_name='–°—Ç–∞—Ç—å—è', related_name='likes')
    created_at = models.DateTimeField('–í—Ä–µ–º—è –ª–∞–π–∫–∞', auto_now_add=True)

    class Meta:
        verbose_name = '–õ–∞–π–∫ —Å—Ç–∞—Ç—å–∏'
        verbose_name_plural = '–õ–∞–π–∫–∏ —Å—Ç–∞—Ç–µ–π'
        unique_together = ['user', 'article']  # –û–¥–∏–Ω –ª–∞–π–∫ –Ω–∞ —Å—Ç–∞—Ç—å—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ordering = ['-created_at']

    def __str__(self):
        return f'{self.user.username} –ª–∞–π–∫–Ω—É–ª {self.article.title}'